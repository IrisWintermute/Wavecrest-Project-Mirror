name: Terraform Deploy

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

# Only allow one run at a time for this environment
concurrency: terraform

# Required because we are using OIDC
permissions:
  id-token: write
  contents: read

env:
  TERRAFORM_VERSION: "1.6.4"
  TERRAFORM_STATE_BUCKET: "wavecrest-ai-terraform-state"
  TERRAFORM_LOCK_TABLE: "terraform-locking"

jobs:
  tf_code_apply:
    name: Terraform Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          # ref: 'check-output' #for debug usage
          set-safe-directory: '/home/runner/work/AI-Project'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::579662209389:role/GithubActionsRoleForConnectOpsAccount
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup state and dynamodb lock table
        shell: 'script -q -e -f -c "bash {0}"'
        run: |
            bucket_name="${{ ENV.TERRAFORM_STATE_BUCKET }}"

            lock_table_name="${{ ENV.TERRAFORM_LOCK_TABLE }}"

            # Check if the bucket already exists
            bucket_exists=false
            if [ aws s3api head-bucket --bucket "$bucket_name" 2>/dev/null ]; then
                echo "Bucket $bucket_name already exists."
            else
                echo "Bucket $bucket_name does not exist. Creating..."
                aws s3api create-bucket --bucket "$bucket_name" --create-bucket-configuration LocationConstraint=eu-west-1
                echo "Bucket $bucket_name created."

                # Enable versioning on the bucket
                aws s3api put-bucket-versioning --bucket "$bucket_name" --versioning-configuration Status=Enabled
                echo "Versioning enabled on bucket $bucket_name."

                # Enable encryption on the bucket
                aws s3api put-bucket-encryption --bucket "$bucket_name" --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'

                echo "Encryption enabled on bucket $bucket_name."
            fi

            # Check if the DynamoDB table already exists
            table_exists=false
            echo aws dynamodb describe-table --table-name "$lock_table_name"
            if [ aws dynamodb describe-table --table-name "$lock_table_name" 2>/dev/null ]; then
                echo "DynamoDB table $lock_table_name already exists."
            else
                echo "DynamoDB table $lock_table_name does not exist. Creating..."
                aws dynamodb create-table \
                    --table-name "$lock_table_name" \
                    --attribute-definitions AttributeName=LockID,AttributeType=S \
                    --key-schema AttributeName=LockID,KeyType=HASH \
                    --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
                    --region eu-west-1
                echo "DynamoDB table $lock_table_name created."
            fi
        env:
          TERM: xterm-256color

      - name: Plan Terraform
        shell: 'script -q -e -f -c "bash {0}"'
        run: |
            cd terraform
            echo "Currently at ${PWD}"

            terraform init -backend-config="bucket=${{ env.TERRAFORM_STATE_BUCKET }}" -backend-config="key=ai-project.tfstate" -backend-config="dynamodb_table=${{ env.TERRAFORM_LOCK_TABLE }}" -reconfigure

            terraform plan -out=plan.out -input=false
        env:
          TERM: xterm-256color

      - name: Apply Terraform
        shell: 'script -q -e -f -c "bash {0}"'
        run: |
          cd terraform
          terraform apply plan.out
        env:
          TERM: xterm-256color
